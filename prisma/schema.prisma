generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  email        String   @unique
  password     String
  name         String
  avatar       String?  // Profile picture URL
  refreshToken String?  // For storing hashed refresh token
  isActive     Boolean  @default(true) // For soft deletion/deactivation
  lastLoginAt  DateTime? // Track last login
  otp          String?  
  otpExpires   DateTime?
  isVerified   Boolean  @default(false)

  // Password reset fields
  resetToken   String?
  resetTokenExpires DateTime?

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  tasks        Task[]
  categories   Category[]

  @@map("users")
}

model Category {
  id          String   @id @default(uuid())
  name        String
  color       String   @default("#3B82F6") // Hex color code
  
  // Relationships
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks       Task[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([name, userId]) // User can't have duplicate category names
  @@map("categories")
}

model Task {
  id          String     @id @default(uuid())
  title       String
  description String?
  status      TaskStatus @default(TODO)
  priority    Priority   @default(MEDIUM)
  dueDate     DateTime?
  position    Int        @default(0) // For ordering/drag-drop
  completedAt DateTime?

  // Relationships  
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  categoryId  String?
  category    Category?  @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("tasks")
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}